# coding: utf-8

from typing import List

from kgea.server.archiver.models.base_model_ import Model
from kgea.server.archiver.models.kge_file import KgeFile
from kgea.server.archiver.models.kge_file_set_status_code import KgeFileSetStatusCode
from kgea.server.archiver import util
from kgea.server.web_services.catalog import KgeFileSet


class KgeArchivedFileSet(Model):
    """NOTE: This class is adapted from the class auto generated by OpenAPI Generator (https://openapi-generator.tech).
    """

    def __init__(
            self,
            biolink_model_release: str = None,
            fileset_version: str = None,
            status: KgeFileSetStatusCode = None,
            files: List[KgeFile] = None,
            size: float = None
    ):
        """KgeArchivedFileSet - a model defined in OpenAPI

        :param biolink_model_release: The biolink_model_release of this KgeArchivedFileSet.
        :param fileset_version: The fileset_version of this KgeArchivedFileSet.
        :param status: The status of this KgeArchivedFileSet.
        :param files: The files of this KgeArchivedFileSet.
        :param size: The size of this KgeArchivedFileSet.
        """
        self.openapi_types = {
            'biolink_model_release': str,
            'fileset_version': str,
            'status': KgeFileSetStatusCode,
            'files': List[KgeFile],
            'size': float,
        }

        self.attribute_map = {
            'biolink_model_release': 'biolink_model_release',
            'fileset_version': 'fileset_version',
            'status': 'status',
            'files': 'files',
            'size': 'size',
        }

        self._biolink_model_release = biolink_model_release
        self._fileset_version = fileset_version
        self._status = status
        self._files = files
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KgeArchivedFileSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KgeArchivedFileSet of this object.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def biolink_model_release(self):
        """Gets the biolink_model_release of this KgeArchivedFileSet.

        Biolink Model released associated with the file set.

        :return: The biolink_model_release of this KgeArchivedFileSet.
        :rtype: str
        """
        return self._biolink_model_release

    @biolink_model_release.setter
    def biolink_model_release(self, biolink_model_release):
        """Sets the biolink_model_release of this KgeArchivedFileSet.

        Biolink Model released associated with the file set.

        :param biolink_model_release: The biolink_model_release of this KgeArchivedFileSet.
        :type biolink_model_release: str
        """

        self._biolink_model_release = biolink_model_release

    @property
    def fileset_version(self):
        """Gets the fileset_version of this KgeArchivedFileSet.

        Version identifier of the file set.

        :return: The fileset_version of this KgeArchivedFileSet.
        :rtype: str
        """
        return self._fileset_version

    @fileset_version.setter
    def fileset_version(self, fileset_version):
        """Sets the fileset_version of this KgeArchivedFileSet.

        Version identifier of the file set.

        :param fileset_version: The fileset_version of this KgeArchivedFileSet.
        :type fileset_version: str
        """

        self._fileset_version = fileset_version

    @property
    def status(self):
        """Gets the status of this KgeArchivedFileSet.


        :return: The status of this KgeArchivedFileSet.
        :rtype: KgeFileSetStatusCode
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KgeArchivedFileSet.


        :param status: The status of this KgeArchivedFileSet.
        :type status: KgeFileSetStatusCode
        """

        self._status = status

    @property
    def files(self):
        """Gets the files of this KgeArchivedFileSet.

        Annotated list of files within a given file set.

        :return: The files of this KgeArchivedFileSet.
        :rtype: List[KgeFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this KgeArchivedFileSet.

        Annotated list of files within a given file set.

        :param files: The files of this KgeArchivedFileSet.
        :type files: List[KgeFile]
        """

        self._files = files

    @property
    def size(self):
        """Gets the size of this KgeArchivedFileSet.

        approximate aggregate size of data files in the file set (megabytes)

        :return: The size of this KgeArchivedFileSet.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this KgeArchivedFileSet.

        approximate aggregate size of data files in the file set (megabytes)

        :param size: The size of this KgeArchivedFileSet.
        :type size: float
        """

        self._size = size

    @classmethod
    def load(cls, fs: KgeFileSet):
        obj = cls()
        # TODO: load the KgeArchivedFileSet selecting metadata from the full KgeFileSet
        return obj
