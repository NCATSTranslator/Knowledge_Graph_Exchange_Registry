# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from kgea.server.archiver.models.base_model_ import Model
from kgea.server.archiver.models.kge_file_type import KgeFileType
from kgea.server.archiver import util


class KgeFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_key: str=None, file_type: KgeFileType=None, file_size: int=None):
        """KgeFile - a model defined in OpenAPI

        :param object_key: The object_key of this KgeFile.
        :param file_type: The file_type of this KgeFile.
        :param file_size: The file_size of this KgeFile.
        """
        self.openapi_types = {
            'object_key': str,
            'file_type': KgeFileType,
            'file_size': int
        }

        self.attribute_map = {
            'object_key': 'object_key',
            'file_type': 'file_type',
            'file_size': 'file_size'
        }

        self._object_key = object_key
        self._file_type = file_type
        self._file_size = file_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KgeFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KgeFile of this KgeFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_key(self):
        """Gets the object_key of this KgeFile.

        S3 object key (KGE File Set relative path) of the file

        :return: The object_key of this KgeFile.
        :rtype: str
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this KgeFile.

        S3 object key (KGE File Set relative path) of the file

        :param object_key: The object_key of this KgeFile.
        :type object_key: str
        """
        if object_key is None:
            raise ValueError("Invalid value for `object_key`, must not be `None`")

        self._object_key = object_key

    @property
    def file_type(self):
        """Gets the file_type of this KgeFile.


        :return: The file_type of this KgeFile.
        :rtype: KgeFileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this KgeFile.


        :param file_type: The file_type of this KgeFile.
        :type file_type: KgeFileType
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")

        self._file_type = file_type

    @property
    def file_size(self):
        """Gets the file_size of this KgeFile.

        size of file in bytes

        :return: The file_size of this KgeFile.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this KgeFile.

        size of file in bytes

        :param file_size: The file_size of this KgeFile.
        :type file_size: int
        """
        if file_size is None:
            raise ValueError("Invalid value for `file_size`, must not be `None`")

        self._file_size = file_size
