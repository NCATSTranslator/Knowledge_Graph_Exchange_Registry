# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from archiver.models.base_model_ import Model
from archiver.models.process_status_code import ProcessStatusCode
from archiver import util


class StatusToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_token: str=None, status: ProcessStatusCode=None):
        """StatusToken - a model defined in OpenAPI

        :param status_token: The status_token of this StatusToken.
        :param status: The status of this StatusToken.
        """
        self.openapi_types = {
            'status_token': str,
            'status': ProcessStatusCode
        }

        self.attribute_map = {
            'status_token': 'status_token',
            'status': 'status'
        }

        self._status_token = status_token
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusToken of this StatusToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_token(self):
        """Gets the status_token of this StatusToken.

        Token tracking the status of post-processing of a KGE File Set.

        :return: The status_token of this StatusToken.
        :rtype: str
        """
        return self._status_token

    @status_token.setter
    def status_token(self, status_token):
        """Sets the status_token of this StatusToken.

        Token tracking the status of post-processing of a KGE File Set.

        :param status_token: The status_token of this StatusToken.
        :type status_token: str
        """
        if status_token is None:
            raise ValueError("Invalid value for `status_token`, must not be `None`")

        self._status_token = status_token

    @property
    def status(self):
        """Gets the status of this StatusToken.


        :return: The status of this StatusToken.
        :rtype: ProcessStatusCode
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusToken.


        :param status: The status of this StatusToken.
        :type status: ProcessStatusCode
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
