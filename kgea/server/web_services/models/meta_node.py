# coding: utf-8

from typing import List, Dict

from kgea.server.web_services.models.base_model_ import Model
from kgea.server.web_services import util


class MetaNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_prefixes: List[str]=None, count: int=None, count_by_source: Dict[str, int]=None):
        """MetaNode - a model defined in OpenAPI

        :param id_prefixes: The id_prefixes of this MetaNode.
        :param count: The count of this MetaNode.
        :param count_by_source: The count_by_source of this MetaNode.
        """
        self.openapi_types = {
            'id_prefixes': List[str],
            'count': int,
            'count_by_source': Dict[str, int]
        }

        self.attribute_map = {
            'id_prefixes': 'id_prefixes',
            'count': 'count',
            'count_by_source': 'count_by_source'
        }

        self._id_prefixes = id_prefixes
        self._count = count
        self._count_by_source = count_by_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetaNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetaNode of this MetaNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_prefixes(self):
        """Gets the id_prefixes of this MetaNode.

        List of CURIE prefixes for the node category that this TRAPI web service understands and accepts on the input.

        :return: The id_prefixes of this MetaNode.
        :rtype: List[str]
        """
        return self._id_prefixes

    @id_prefixes.setter
    def id_prefixes(self, id_prefixes):
        """Sets the id_prefixes of this MetaNode.

        List of CURIE prefixes for the node category that this TRAPI web service understands and accepts on the input.

        :param id_prefixes: The id_prefixes of this MetaNode.
        :type id_prefixes: List[str]
        """
        if id_prefixes is None:
            raise ValueError("Invalid value for `id_prefixes`, must not be `None`")
        if id_prefixes is not None and len(id_prefixes) < 1:
            raise ValueError("Invalid value for `id_prefixes`, number of items must be greater than or equal to `1`")

        self._id_prefixes = id_prefixes

    @property
    def count(self):
        """Gets the count of this MetaNode.

        Total number of node instances of this node category known to this KGX knowledge graph, or -1 if the number is not known.

        :return: The count of this MetaNode.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MetaNode.

        Total number of node instances of this node category known to this KGX knowledge graph, or -1 if the number is not known.

        :param count: The count of this MetaNode.
        :type count: int
        """

        self._count = count

    @property
    def count_by_source(self):
        """Gets the count_by_source of this MetaNode.

        Number of node instances by their source

        :return: The count_by_source of this MetaNode.
        :rtype: Dict[str, int]
        """
        return self._count_by_source

    @count_by_source.setter
    def count_by_source(self, count_by_source):
        """Sets the count_by_source of this MetaNode.

        Number of node instances by their source

        :param count_by_source: The count_by_source of this MetaNode.
        :type count_by_source: Dict[str, int]
        """

        self._count_by_source = count_by_source
