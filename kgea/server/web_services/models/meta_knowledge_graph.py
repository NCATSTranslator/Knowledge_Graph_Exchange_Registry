# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from kgea.server.web_services.models.base_model_ import Model
from kgea.server.web_services.models.meta_edge import MetaEdge
from kgea.server.web_services.models.meta_node import MetaNode
from kgea.server.web_services import util


class MetaKnowledgeGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes: Dict[str, MetaNode]=None, edges: List[MetaEdge]=None):
        """MetaKnowledgeGraph - a model defined in OpenAPI

        :param nodes: The nodes of this MetaKnowledgeGraph.
        :param edges: The edges of this MetaKnowledgeGraph.
        """
        self.openapi_types = {
            'nodes': Dict[str, MetaNode],
            'edges': List[MetaEdge]
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'edges': 'edges'
        }

        self._nodes = nodes
        self._edges = edges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetaKnowledgeGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetaKnowledgeGraph of this MetaKnowledgeGraph.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this MetaKnowledgeGraph.

        Collection of node categories provided by this KGX knowledge graph, indexed by Biolink class CURIEs.

        :return: The nodes of this MetaKnowledgeGraph.
        :rtype: Dict[str, MetaNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this MetaKnowledgeGraph.

        Collection of node categories provided by this KGX knowledge graph, indexed by Biolink class CURIEs.

        :param nodes: The nodes of this MetaKnowledgeGraph.
        :type nodes: Dict[str, MetaNode]
        """

        self._nodes = nodes

    @property
    def edges(self):
        """Gets the edges of this MetaKnowledgeGraph.

        List of edges/predicates provided by this KGX knowledge graph.

        :return: The edges of this MetaKnowledgeGraph.
        :rtype: List[MetaEdge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this MetaKnowledgeGraph.

        List of edges/predicates provided by this KGX knowledge graph.

        :param edges: The edges of this MetaKnowledgeGraph.
        :type edges: List[MetaEdge]
        """
        if edges is not None and len(edges) < 1:
            raise ValueError("Invalid value for `edges`, number of items must be greater than or equal to `1`")

        self._edges = edges
