# coding: utf-8

from kgea.server.web_services.models.base_model_ import Model
from kgea.server.web_services import util


class KgeProviderMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kg_id: str=None, kg_name: str=None, kg_description: str=None, translator_component: str=None, translator_team: str=None, submitter_name: str=None, submitter_email: str=None, license_name: str=None, license_url: str=None, terms_of_service: str=None):
        """KgeProviderMetadata - a model defined in OpenAPI

        :param kg_id: The kg_id of this KgeProviderMetadata.
        :param kg_name: The kg_name of this KgeProviderMetadata.
        :param kg_description: The kg_description of this KgeProviderMetadata.
        :param translator_component: The translator_component of this KgeProviderMetadata.
        :param translator_team: The translator_team of this KgeProviderMetadata.
        :param submitter_name: The submitter_name of this KgeProviderMetadata.
        :param submitter_email: The submitter_email of this KgeProviderMetadata.
        :param license_name: The license_name of this KgeProviderMetadata.
        :param license_url: The license_url of this KgeProviderMetadata.
        :param terms_of_service: The terms_of_service of this KgeProviderMetadata.
        """
        self.openapi_types = {
            'kg_id': str,
            'kg_name': str,
            'kg_description': str,
            'translator_component': str,
            'translator_team': str,
            'submitter_name': str,
            'submitter_email': str,
            'license_name': str,
            'license_url': str,
            'terms_of_service': str
        }

        self.attribute_map = {
            'kg_id': 'kg_id',
            'kg_name': 'kg_name',
            'kg_description': 'kg_description',
            'translator_component': 'translator_component',
            'translator_team': 'translator_team',
            'submitter_name': 'submitter_name',
            'submitter_email': 'submitter_email',
            'license_name': 'license_name',
            'license_url': 'license_url',
            'terms_of_service': 'terms_of_service'
        }

        self._kg_id = kg_id
        self._kg_name = kg_name
        self._kg_description = kg_description
        self._translator_component = translator_component
        self._translator_team = translator_team
        self._submitter_name = submitter_name
        self._submitter_email = submitter_email
        self._license_name = license_name
        self._license_url = license_url
        self._terms_of_service = terms_of_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KgeProviderMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KgeProviderMetadata of this KgeProviderMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kg_id(self):
        """Gets the kg_id of this KgeProviderMetadata.

        Identifier of the knowledge graph that the metadata describes.

        :return: The kg_id of this KgeProviderMetadata.
        :rtype: str
        """
        return self._kg_id

    @kg_id.setter
    def kg_id(self, kg_id):
        """Sets the kg_id of this KgeProviderMetadata.

        Identifier of the knowledge graph that the metadata describes.

        :param kg_id: The kg_id of this KgeProviderMetadata.
        :type kg_id: str
        """

        self._kg_id = kg_id

    @property
    def kg_name(self):
        """Gets the kg_name of this KgeProviderMetadata.

        Semantic Medline Database.

        :return: The kg_name of this KgeProviderMetadata.
        :rtype: str
        """
        return self._kg_name

    @kg_name.setter
    def kg_name(self, kg_name):
        """Sets the kg_name of this KgeProviderMetadata.

        Semantic Medline Database.

        :param kg_name: The kg_name of this KgeProviderMetadata.
        :type kg_name: str
        """

        self._kg_name = kg_name

    @property
    def kg_description(self):
        """Gets the kg_description of this KgeProviderMetadata.

        Identifier of the knowledge graph that the metadata describes.

        :return: The kg_description of this KgeProviderMetadata.
        :rtype: str
        """
        return self._kg_description

    @kg_description.setter
    def kg_description(self, kg_description):
        """Sets the kg_description of this KgeProviderMetadata.

        Identifier of the knowledge graph that the metadata describes.

        :param kg_description: The kg_description of this KgeProviderMetadata.
        :type kg_description: str
        """

        self._kg_description = kg_description

    @property
    def translator_component(self):
        """Gets the translator_component of this KgeProviderMetadata.

        Type of Translator component generating the knowledge graph (i.e. KP, ARA, SRI).

        :return: The translator_component of this KgeProviderMetadata.
        :rtype: str
        """
        return self._translator_component

    @translator_component.setter
    def translator_component(self, translator_component):
        """Sets the translator_component of this KgeProviderMetadata.

        Type of Translator component generating the knowledge graph (i.e. KP, ARA, SRI).

        :param translator_component: The translator_component of this KgeProviderMetadata.
        :type translator_component: str
        """

        self._translator_component = translator_component

    @property
    def translator_team(self):
        """Gets the translator_team of this KgeProviderMetadata.

        Translator team providing the knowledge graph data.

        :return: The translator_team of this KgeProviderMetadata.
        :rtype: str
        """
        return self._translator_team

    @translator_team.setter
    def translator_team(self, translator_team):
        """Sets the translator_team of this KgeProviderMetadata.

        Translator team providing the knowledge graph data.

        :param translator_team: The translator_team of this KgeProviderMetadata.
        :type translator_team: str
        """

        self._translator_team = translator_team

    @property
    def submitter_name(self):
        """Gets the submitter_name of this KgeProviderMetadata.

        Name of the submitter/owner of the knowledge graph dataset provider

        :return: The submitter_name of this KgeProviderMetadata.
        :rtype: str
        """
        return self._submitter_name

    @submitter_name.setter
    def submitter_name(self, submitter_name):
        """Sets the submitter_name of this KgeProviderMetadata.

        Name of the submitter/owner of the knowledge graph dataset provider

        :param submitter_name: The submitter_name of this KgeProviderMetadata.
        :type submitter_name: str
        """

        self._submitter_name = submitter_name

    @property
    def submitter_email(self):
        """Gets the submitter_email of this KgeProviderMetadata.

        Email address for the submitter/owner of the knowledge graph dataset provider.

        :return: The submitter_email of this KgeProviderMetadata.
        :rtype: str
        """
        return self._submitter_email

    @submitter_email.setter
    def submitter_email(self, submitter_email):
        """Sets the submitter_email of this KgeProviderMetadata.

        Email address for the submitter/owner of the knowledge graph dataset provider.

        :param submitter_email: The submitter_email of this KgeProviderMetadata.
        :type submitter_email: str
        """

        self._submitter_email = submitter_email

    @property
    def license_name(self):
        """Gets the license_name of this KgeProviderMetadata.

        Name of Knowledge Graph data use license.

        :return: The license_name of this KgeProviderMetadata.
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name):
        """Sets the license_name of this KgeProviderMetadata.

        Name of Knowledge Graph data use license.

        :param license_name: The license_name of this KgeProviderMetadata.
        :type license_name: str
        """

        self._license_name = license_name

    @property
    def license_url(self):
        """Gets the license_url of this KgeProviderMetadata.

        URL to Knowledge Graph license data use description.

        :return: The license_url of this KgeProviderMetadata.
        :rtype: str
        """
        return self._license_url

    @license_url.setter
    def license_url(self, license_url):
        """Sets the license_url of this KgeProviderMetadata.

        URL to Knowledge Graph license data use description.

        :param license_url: The license_url of this KgeProviderMetadata.
        :type license_url: str
        """

        self._license_url = license_url

    @property
    def terms_of_service(self):
        """Gets the terms_of_service of this KgeProviderMetadata.

        URL to Knowledge Graph data use \"terms of service\".

        :return: The terms_of_service of this KgeProviderMetadata.
        :rtype: str
        """
        return self._terms_of_service

    @terms_of_service.setter
    def terms_of_service(self, terms_of_service):
        """Sets the terms_of_service of this KgeProviderMetadata.

        URL to Knowledge Graph data use \"terms of service\".

        :param terms_of_service: The terms_of_service of this KgeProviderMetadata.
        :type terms_of_service: str
        """

        self._terms_of_service = terms_of_service
