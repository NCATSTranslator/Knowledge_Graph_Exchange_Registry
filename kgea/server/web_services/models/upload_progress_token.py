# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from web_services.models.base_model_ import Model
from web_services.models.int import Int
from web_services import util


class UploadProgressToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_key: str=None, current_position: Int=None, end_position: Int=None):
        """UploadProgressToken - a model defined in OpenAPI

        :param object_key: The object_key of this UploadProgressToken.
        :param current_position: The current_position of this UploadProgressToken.
        :param end_position: The end_position of this UploadProgressToken.
        """
        self.openapi_types = {
            'object_key': str,
            'current_position': Int,
            'end_position': Int
        }

        self.attribute_map = {
            'object_key': 'object_key',
            'current_position': 'current_position',
            'end_position': 'end_position'
        }

        self._object_key = object_key
        self._current_position = current_position
        self._end_position = end_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadProgressToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadProgressToken of this UploadProgressToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_key(self):
        """Gets the object_key of this UploadProgressToken.

        Object key associated with a given uploading file.

        :return: The object_key of this UploadProgressToken.
        :rtype: str
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this UploadProgressToken.

        Object key associated with a given uploading file.

        :param object_key: The object_key of this UploadProgressToken.
        :type object_key: str
        """
        if object_key is None:
            raise ValueError("Invalid value for `object_key`, must not be `None`")

        self._object_key = object_key

    @property
    def current_position(self):
        """Gets the current_position of this UploadProgressToken.

        Number of bytes uploaded so far.

        :return: The current_position of this UploadProgressToken.
        :rtype: Int
        """
        return self._current_position

    @current_position.setter
    def current_position(self, current_position):
        """Sets the current_position of this UploadProgressToken.

        Number of bytes uploaded so far.

        :param current_position: The current_position of this UploadProgressToken.
        :type current_position: Int
        """
        if current_position is None:
            raise ValueError("Invalid value for `current_position`, must not be `None`")

        self._current_position = current_position

    @property
    def end_position(self):
        """Gets the end_position of this UploadProgressToken.

        Total expected bytes to be uploaded.

        :return: The end_position of this UploadProgressToken.
        :rtype: Int
        """
        return self._end_position

    @end_position.setter
    def end_position(self, end_position):
        """Sets the end_position of this UploadProgressToken.

        Total expected bytes to be uploaded.

        :param end_position: The end_position of this UploadProgressToken.
        :type end_position: Int
        """
        if end_position is None:
            raise ValueError("Invalid value for `end_position`, must not be `None`")

        self._end_position = end_position
