# coding: utf-8

from typing import List, Dict

from kgea.server.web_services.models.base_model_ import Model
import re
from kgea.server.web_services import util


class MetaEdge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subject: str=None, predicate: str=None, object: str=None, relations: List[str]=None, count: int=None, count_by_source: Dict[str, int]=None):
        """MetaEdge - a model defined in OpenAPI

        :param subject: The subject of this MetaEdge.
        :param predicate: The predicate of this MetaEdge.
        :param object: The object of this MetaEdge.
        :param relations: The relations of this MetaEdge.
        :param count: The count of this MetaEdge.
        :param count_by_source: The count_by_source of this MetaEdge.
        """
        self.openapi_types = {
            'subject': str,
            'predicate': str,
            'object': str,
            'relations': List[str],
            'count': int,
            'count_by_source': Dict[str, int]
        }

        self.attribute_map = {
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object',
            'relations': 'relations',
            'count': 'count',
            'count_by_source': 'count_by_source'
        }

        self._subject = subject
        self._predicate = predicate
        self._object = object
        self._relations = relations
        self._count = count
        self._count_by_source = count_by_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetaEdge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetaEdge of this MetaEdge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self):
        """Gets the subject of this MetaEdge.

        Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.

        :return: The subject of this MetaEdge.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MetaEdge.

        Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.

        :param subject: The subject of this MetaEdge.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")
        if subject is not None and not re.search(r'^biolink:[A-Z][a-zA-Z]*$', subject):
            raise ValueError("Invalid value for `subject`, must be a follow pattern or equal to `/^biolink:[A-Z][a-zA-Z]*$/`")

        self._subject = subject

    @property
    def predicate(self):
        """Gets the predicate of this MetaEdge.

        CURIE for a Biolink 'predicate' slot, taken from the Biolink slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate defines the Biolink relationship between the subject and object nodes of a biolink:Association defining a knowledge graph edge.

        :return: The predicate of this MetaEdge.
        :rtype: str
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this MetaEdge.

        CURIE for a Biolink 'predicate' slot, taken from the Biolink slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate defines the Biolink relationship between the subject and object nodes of a biolink:Association defining a knowledge graph edge.

        :param predicate: The predicate of this MetaEdge.
        :type predicate: str
        """
        if predicate is None:
            raise ValueError("Invalid value for `predicate`, must not be `None`")
        if predicate is not None and not re.search(r'^biolink:[a-z][a-z_]*$', predicate):
            raise ValueError("Invalid value for `predicate`, must be a follow pattern or equal to `/^biolink:[a-z][a-z_]*$/`")

        self._predicate = predicate

    @property
    def object(self):
        """Gets the object of this MetaEdge.

        Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.

        :return: The object of this MetaEdge.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this MetaEdge.

        Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.

        :param object: The object of this MetaEdge.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")
        if object is not None and not re.search(r'^biolink:[A-Z][a-zA-Z]*$', object):
            raise ValueError("Invalid value for `object`, must be a follow pattern or equal to `/^biolink:[A-Z][a-zA-Z]*$/`")

        self._object = object

    @property
    def relations(self):
        """Gets the relations of this MetaEdge.

        Low-level relations from the underlying source.

        :return: The relations of this MetaEdge.
        :rtype: List[str]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this MetaEdge.

        Low-level relations from the underlying source.

        :param relations: The relations of this MetaEdge.
        :type relations: List[str]
        """

        self._relations = relations

    @property
    def count(self):
        """Gets the count of this MetaEdge.

        Total number of edge instances of this (subject, predicate, object) triple known to this KGX knowledge graph, or -1 if the number is not known.

        :return: The count of this MetaEdge.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this MetaEdge.

        Total number of edge instances of this (subject, predicate, object) triple known to this KGX knowledge graph, or -1 if the number is not known.

        :param count: The count of this MetaEdge.
        :type count: int
        """

        self._count = count

    @property
    def count_by_source(self):
        """Gets the count_by_source of this MetaEdge.

        Number of edge instances by their source.

        :return: The count_by_source of this MetaEdge.
        :rtype: Dict[str, int]
        """
        return self._count_by_source

    @count_by_source.setter
    def count_by_source(self, count_by_source):
        """Sets the count_by_source of this MetaEdge.

        Number of edge instances by their source.

        :param count_by_source: The count_by_source of this MetaEdge.
        :type count_by_source: Dict[str, int]
        """

        self._count_by_source = count_by_source
