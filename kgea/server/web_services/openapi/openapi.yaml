openapi: 3.0.1
info:
  contact:
    email: richard.bruskiewich@delphinai.com
    name: Richard Bruskiewich
    x-role: responsible developer
    x-id: https://github.com/RichardBruskiewich
  description: OpenAPI for the NCATS Biomedical Translator Knowledge Graph Exchange
    Archive
  license:
    name: MIT 2.0
    url: https://en.wikipedia.org/wiki/MIT_License
  termsOfService: https://ncats.nih.gov/translator
  title: OpenAPI for the NCATS Biomedical Translator Knowledge Graph EXchange (KGE)
    Archive
  version: 0.0.1-dev
  x-translator:
    component: SRI service
    team:
    - SRI
externalDocs:
  description: Documentation for the NCATS Biomedical Translator Knowledge Graph Exchange
    (KGE) Archive
  url: https://github.com/NCATSTranslator/Knowledge_Graph_Exchange_Registry
servers:
- description: Localhost URL for server, to be proxied to the real internet
  url: http://localhost:8080/archive
tags:
- description: KGE file set upload form
  name: upload
- description: Provider "access" metadata for KGE file set
  name: provider
- description: Content metadata for KGX-formatted data files in a KGE file set.
  name: content
- name: translator
paths:
  /catalog:
    get:
      operationId: get_file_set_catalog
      responses:
        "200":
          content:
            application/json:
              schema:
                description: |-
                  List of available KGE File Sets (initial implementation is a simple list of
                   normalized knowledge graph identifiers)
                items:
                  type: string
                type: array
          description: Catalog of available KGE File Sets
      summary: Returns the catalog of available KGE File Sets
      tags:
      - provider
      x-openapi-router-controller: kgea.server.web_services.controllers.provider_controller
  /publish/{kg_id}:
    get:
      operationId: publish_file_set
      parameters:
      - description: KGE File Set identifier for the knowledge graph for which data
          files are being accessed.
        explode: false
        in: path
        name: kg_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "302":
          description: After KGE File Set publication is triggered, user gets redirected
            to /home.
      summary: Publish a registered File Set
      tags:
      - upload
      x-openapi-router-controller: kgea.server.web_services.controllers.upload_controller
  /register:
    post:
      operationId: register_file_set
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/x-www-form-urlencoded:
            encoding:
              submitter:
                contentType: text/plain; charset=utf-8
                style: form
              kg_name:
                contentType: text/plain; charset=utf-8
                style: form
            schema:
              properties:
                kg_name:
                  type: string
                kg_description:
                  type: string
                submitter:
                  type: string
                submitter_email:
                  type: string
                translator_component:
                  type: string
                translator_team:
                  type: string
                license_name:
                  type: string
                license_url:
                  type: string
                terms_of_service:
                  type: string
              required:
              - kg_name
              - submitter
              - submitter_email
              - translator_component
              - translator_team
              type: object
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
          description: Upload successfully completed.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: Bad request. The request is invalid according to this OpenAPI
            schema OR a specific parameter is believed to be invalid somehow (not
            just unrecognized).
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal server error.
        "501":
          content:
            application/json:
              schema:
                type: string
          description: Not implemented.
      summary: Register core parameters for the KGE File Set upload
      tags:
      - upload
      x-openapi-router-controller: kgea.server.web_services.controllers.upload_controller
      x-codegen-request-body-name: body
  /upload:
    post:
      operationId: upload_file
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          multipart/form-data:
            encoding:
              kg_id:
                contentType: text/plain; charset=utf-8
                style: form
              kgx_file_content:
                contentType: text/plain; charset=utf-8
                style: form
              upload_mode:
                contentType: text/plain; charset=utf-8
                style: form
              content_url:
                contentType: text/plain; charset=utf-8
                style: form
              content_name:
                contentType: text/plain; charset=utf-8
                style: form
              uploaded_file:
                contentType: text/csv, text/tab-separated-values, text/json
                style: form
            schema:
              description: Uploading form posting of (meta-)data files. The 'upload_mode'
                string argument specifies the category and/or mode as one of 'metadata',
                'content_from_local_file' or 'content_from_url'. If 'metadata' or
                'content_from_local_file' are indicated, then the 'uploaded_file'
                parameter should be set to the file to be uploaded. If 'upload_mode'
                is set to 'content_from_url' then the 'content_url' parameter is taken
                as a REST endpoint of the file to be transferred into the Archive
                (authentication not yet supported - URL should provide unauthenticated
                access). The 'content_name' should be set either to the file name
                of the 'metadata' or 'content_from_local_file', or url transfers,
                set by inference or as specified by the caller (especially if the
                'content_url' doesn't resolve to a definitive file name). The specific
                KGX file content of the current upload file is set by the `kgx_file_content'
                for KGX data files uploaded in the 'content_from_local_file' or 'content_from_url'
                modes set by the selected 'nodes' versus 'edges' radio button.
              properties:
                kg_id:
                  type: string
                kgx_file_content:
                  type: string
                upload_mode:
                  type: string
                content_url:
                  type: string
                content_name:
                  type: string
                uploaded_file:
                  format: binary
                  type: string
              required:
              - content_name
              - kg_id
              - upload_mode
              type: object
        description: KGE File Set metadata or data file submitted
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                type: string
          description: Upload successfully completed.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: Bad request. The request is invalid according to this OpenAPI
            schema OR a specific parameter is believed to be invalid somehow (not
            just unrecognized).
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal server error.
        "501":
          content:
            application/json:
              schema:
                type: string
          description: Not implemented.
      summary: Upload processing of KGE File Set file
      tags:
      - upload
      x-openapi-router-controller: kgea.server.web_services.controllers.upload_controller
      x-codegen-request-body-name: body
  /{kg_id}/access:
    get:
      operationId: access
      parameters:
      - description: KGE File Set identifier for the knowledge graph for which data
          files are being accessed
        explode: false
        in: path
        name: kg_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/Attribute'
                description: Provider metadata describing the location and inventory
                  of KGE files
                type: object
          description: Name label of KGE File Set whose provider metadata is being
            reported
        "400":
          content:
            application/json:
              schema:
                type: string
          description: Bad request. The request is invalid according to this OpenAPI
            schema OR knowledge graph identifier is not just recognized.
      summary: Get KGE File Set provider metadata.
      tags:
      - provider
      x-openapi-router-controller: kgea.server.web_services.controllers.provider_controller
  /{kg_id}/meta_knowledge_graph:
    get:
      operationId: meta_knowledge_graph
      parameters:
      - description: KGE File Set identifier for the knowledge graph for which data
          files are being accessed.
        explode: false
        in: path
        name: kg_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaKnowledgeGraph'
          description: Returns meta knowledge graph representation of this KGX knowledge
            graph.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: Bad request. The request is invalid according to this OpenAPI
            schema OR KGX knowledge graph identifier is not just unrecognized.
      summary: Meta knowledge graph representation of this KGX knowledge graph.
      tags:
      - content
      x-openapi-router-controller: kgea.server.web_services.controllers.content_controller
components:
  requestBodies:
    inline_object_1:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object_1'
      required: true
    inline_object:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
  schemas:
    Attribute:
      additionalProperties: false
      description: Generic metadata attribute.
      properties:
        type:
          description: Type of the metadata attribute, from the Translator Registry
            metadata dictionary.
          example: submitter
          title: type
          type: string
        value:
          description: Value of the attribute, encoded as a string.
          example: Abraham Lincoln
          title: value
          type: string
      required:
      - type
      - value
      title: Attribute
      type: object
    BiolinkEntity:
      description: Compact URI (CURIE) for a Biolink class, biolink:NamedThing or
        a child thereof. The CURIE must use the prefix 'biolink:' followed by the
        PascalCase class name.
      example: biolink:PhenotypicFeature
      externalDocs:
        description: Biolink model entities
        url: https://biolink.github.io/biolink-model/docs/NamedThing.html
      pattern: ^biolink:[A-Z][a-zA-Z]*$
      title: BiolinkEntity
      type: string
    BiolinkPredicate:
      description: CURIE for a Biolink 'predicate' slot, taken from the Biolink slot
        ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate
        defines the Biolink relationship between the subject and object nodes of a
        biolink:Association defining a knowledge graph edge.
      example: biolink:interacts_with
      externalDocs:
        description: Biolink model predicates
        url: https://biolink.github.io/biolink-model/docs/related_to.html
      pattern: ^biolink:[a-z][a-z_]*$
      title: BiolinkPredicate
      type: string
    MetaKnowledgeGraph:
      description: Knowledge-map representation of this KGX knowledge graph.
      example:
        nodes:
          key:
            id_prefixes:
            - CHEMBL.COMPOUND
            - INCHIKEY
            count: 0
            count_by_source:
              ChEMBL: 1234
        edges:
        - predicate: biolink:interacts_with
          subject: biolink:PhenotypicFeature
          count: 6
          relations:
          - inhibits
          - activates
          count_by_source:
            ChEMBL: 1234
          object: biolink:PhenotypicFeature
        - predicate: biolink:interacts_with
          subject: biolink:PhenotypicFeature
          count: 6
          relations:
          - inhibits
          - activates
          count_by_source:
            ChEMBL: 1234
          object: biolink:PhenotypicFeature
      properties:
        nodes:
          additionalProperties:
            $ref: '#/components/schemas/MetaNode'
          description: Collection of node categories provided by this KGX knowledge
            graph, indexed by Biolink class CURIEs.
          title: nodes
          type: object
        edges:
          description: List of edges/predicates provided by this KGX knowledge graph.
          items:
            $ref: '#/components/schemas/MetaEdge'
          minItems: 1
          title: edges
          type: array
      title: MetaKnowledgeGraph
      type: object
    MetaNode:
      additionalProperties: false
      description: Description of a node category provided by this KGX knowledge graph.
      example:
        id_prefixes:
        - CHEMBL.COMPOUND
        - INCHIKEY
        count: 0
        count_by_source:
          ChEMBL: 1234
      properties:
        id_prefixes:
          description: List of CURIE prefixes for the node category that this TRAPI
            web service understands and accepts on the input.
          example:
          - CHEMBL.COMPOUND
          - INCHIKEY
          items:
            type: string
          minItems: 1
          title: id_prefixes
          type: array
        count:
          description: Total number of node instances of this node category known
            to this KGX knowledge graph, or -1 if the number is not known.
          title: count
          type: integer
        count_by_source:
          additionalProperties:
            type: integer
          description: Number of node instances by their source
          example:
            ChEMBL: 1234
          title: count_by_source
          type: object
      required:
      - id_prefixes
      title: MetaNode
      type: object
    MetaEdge:
      additionalProperties: false
      description: Edge in a meta knowledge map describing relationship between a
        subject Biolink class and an object Biolink class.
      example:
        predicate: biolink:interacts_with
        subject: biolink:PhenotypicFeature
        count: 6
        relations:
        - inhibits
        - activates
        count_by_source:
          ChEMBL: 1234
        object: biolink:PhenotypicFeature
      properties:
        subject:
          description: Compact URI (CURIE) for a Biolink class, biolink:NamedThing
            or a child thereof. The CURIE must use the prefix 'biolink:' followed
            by the PascalCase class name.
          example: biolink:PhenotypicFeature
          externalDocs:
            description: Biolink model entities
            url: https://biolink.github.io/biolink-model/docs/NamedThing.html
          pattern: ^biolink:[A-Z][a-zA-Z]*$
          title: BiolinkEntity
          type: string
        predicate:
          description: CURIE for a Biolink 'predicate' slot, taken from the Biolink
            slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This
            predicate defines the Biolink relationship between the subject and object
            nodes of a biolink:Association defining a knowledge graph edge.
          example: biolink:interacts_with
          externalDocs:
            description: Biolink model predicates
            url: https://biolink.github.io/biolink-model/docs/related_to.html
          pattern: ^biolink:[a-z][a-z_]*$
          title: BiolinkPredicate
          type: string
        object:
          description: Compact URI (CURIE) for a Biolink class, biolink:NamedThing
            or a child thereof. The CURIE must use the prefix 'biolink:' followed
            by the PascalCase class name.
          example: biolink:PhenotypicFeature
          externalDocs:
            description: Biolink model entities
            url: https://biolink.github.io/biolink-model/docs/NamedThing.html
          pattern: ^biolink:[A-Z][a-zA-Z]*$
          title: BiolinkEntity
          type: string
        relations:
          description: Low-level relations from the underlying source.
          example:
          - inhibits
          - activates
          items:
            type: string
          title: relations
          type: array
        count:
          description: Total number of edge instances of this (subject, predicate,
            object) triple known to this KGX knowledge graph, or -1 if the number
            is not known.
          title: count
          type: integer
        count_by_source:
          additionalProperties:
            type: integer
          description: Number of edge instances by their source.
          example:
            ChEMBL: 1234
          title: count_by_source
          type: object
      required:
      - object
      - predicate
      - subject
      title: MetaEdge
      type: object
    inline_object:
      properties:
        kg_name:
          type: string
        kg_description:
          type: string
        submitter:
          type: string
        submitter_email:
          type: string
        translator_component:
          type: string
        translator_team:
          type: string
        license_name:
          type: string
        license_url:
          type: string
        terms_of_service:
          type: string
      required:
      - kg_name
      - submitter
      - submitter_email
      - translator_component
      - translator_team
      type: object
    inline_object_1:
      description: Uploading form posting of (meta-)data files. The 'upload_mode'
        string argument specifies the category and/or mode as one of 'metadata', 'content_from_local_file'
        or 'content_from_url'. If 'metadata' or 'content_from_local_file' are indicated,
        then the 'uploaded_file' parameter should be set to the file to be uploaded.
        If 'upload_mode' is set to 'content_from_url' then the 'content_url' parameter
        is taken as a REST endpoint of the file to be transferred into the Archive
        (authentication not yet supported - URL should provide unauthenticated access).
        The 'content_name' should be set either to the file name of the 'metadata'
        or 'content_from_local_file', or url transfers, set by inference or as specified
        by the caller (especially if the 'content_url' doesn't resolve to a definitive
        file name). The specific KGX file content of the current upload file is set
        by the `kgx_file_content' for KGX data files uploaded in the 'content_from_local_file'
        or 'content_from_url' modes set by the selected 'nodes' versus 'edges' radio
        button.
      properties:
        kg_id:
          type: string
        kgx_file_content:
          type: string
        upload_mode:
          type: string
        content_url:
          type: string
        content_name:
          type: string
        uploaded_file:
          format: binary
          type: string
      required:
      - content_name
      - kg_id
      - upload_mode
      type: object
